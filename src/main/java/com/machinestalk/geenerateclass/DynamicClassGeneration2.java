package com.machinestalk.geenerateclass;
import java.lang.reflect.Method;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

/// it is dynamically loaded and _executed_ 'Class' using a custom class loader
public class DynamicClassGeneration2 {
    public static void main(String[] args) throws Exception {
        // Create a new ClassWriter with the COMPUTE_FRAMES flag
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);

        // Define the class metadata
        cw.visit(Opcodes.V17, Opcodes.ACC_PUBLIC, "DynamicClass", null, "java/lang/Object", null);

        // Create a default constructor
        MethodVisitor constructorMv = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
        constructorMv.visitCode();
        constructorMv.visitVarInsn(Opcodes.ALOAD, 0);
        constructorMv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
        constructorMv.visitInsn(Opcodes.RETURN);
        constructorMv.visitMaxs(1, 1);
        constructorMv.visitEnd();

        // Create a new method
        MethodVisitor methodMv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "helloWorld", "()V", null, null);
        methodMv.visitCode();
        methodMv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        methodMv.visitLdcInsn("Hello, World!");
        methodMv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
        methodMv.visitInsn(Opcodes.RETURN);
        methodMv.visitMaxs(2, 0);
        methodMv.visitEnd();
        System.out.println();
        // Finish class creation
        cw.visitEnd();

        // Get the generated bytecode as a byte array
        byte[] classBytes = cw.toByteArray();

        // Define a custom class loader
        ClassLoader classLoader = new ClassLoader() {
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                if (name.equals("DynamicClass")) {
                    return defineClass(name, classBytes, 0, classBytes.length);
                }
                return super.findClass(name);
            }
        };

        // Load the dynamically generated class
        Class<?> dynamicClass = classLoader.loadClass("DynamicClass");

        // Invoke the helloWorld method using reflection
        Method helloWorldMethod = dynamicClass.getMethod("helloWorld");
        helloWorldMethod.invoke(null);
    }
}

